{"version":3,"sources":["4k.jpg","Dropdownmenu.js","Product.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","DropdownMenuHandler","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","bind","assertThisInitialized","state","dropdownOpen","setState","react_default","a","createElement","className","reactstrap_es","isOpen","caret","header","disabled","divider","Component","Product","src","imagen","alt","tela","precio","App","data","_this2","axios","get","then","response","console","log","lib_default","src_Dropdownmenu","map","title","price","image","src_Product_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oMAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sKC2CzBC,qBAtCb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,OAASP,EAAKO,OAAOC,KAAZP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACdA,EAAKU,MAAQ,CACXC,cAAc,GALCX,wEAUjBG,KAAKS,SAAS,CACZD,cAAeR,KAAKO,MAAMC,gDAI5B,OACEE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,iBAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAgBC,OAAQf,KAAKO,MAAMC,aAAcJ,OAAQJ,KAAKI,QAC5DM,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAgBE,OAAK,GAArB,mBAGEN,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAcG,QAAM,GAApB,UACAP,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAcI,UAAQ,GAAtB,UACAR,EAAAC,EAAAC,cAACE,EAAA,EAAD,uBACAJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAcK,SAAO,IACrBT,EAAAC,EAAAC,cAACE,EAAA,EAAD,kCA/BkBM,+BCcnBC,0LAdP,OACEX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACfH,EAAAC,EAAAC,cAAA,OAAKU,IAAKtB,KAAKJ,MAAM2B,OAAQC,IAAKxB,KAAKJ,MAAM6B,OAC3Cf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACZb,KAAKJ,MAAM6B,KADd,IAEGzB,KAAKJ,MAAM8B,iBARNN,+BCgDPO,2BAxCb,SAAAA,EAAY/B,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA2B,IACjB9B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA6B,GAAAxB,KAAAH,KAAMJ,KAEDW,MAAQ,CACXqB,KAAO,IAJQ/B,oFASC,IAAAgC,EAAA7B,KAClB8B,IAAMC,IAAI,iCAAiCC,KAC1C,SAAAC,GACCJ,EAAKpB,SAAW,CACdmB,KAAOK,GAETC,QAAQC,IAAIN,EAAKtB,MAAMqB,yCAMzB,OACElB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAACwB,EAAAzB,EAAD,KACED,EAAAC,EAAAC,cAACyB,EAAD,QAGJ3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACZb,KAAKO,MAAMqB,KAAO5B,KAAKO,MAAMqB,KAAKU,IAAI,SAASC,EAAOC,EAAOC,GACxD,OAAQ/B,EAAAC,EAAAC,cAAC8B,EAAD,CAASH,MAASA,EAAOC,MAASA,EAAOC,MAASA,MAExD,cAjCArB,cCGEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECVNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC","file":"static/js/main.8fc1a7fc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/4k.ac73766b.jpg\";","import React, {Component} from 'react'\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\nimport './Dropdownmenu.css'\r\n\r\nclass DropdownMenuHandler extends Component{\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.toggle = this.toggle.bind(this);\r\n    this.state = {\r\n      dropdownOpen: false\r\n    };\r\n  }\r\n\r\n  toggle() {\r\n    this.setState({\r\n      dropdownOpen: !this.state.dropdownOpen\r\n    });\r\n  }\r\n  render(){\r\n    return(\r\n      <div className=\"Sticker\">\r\n        <div className=\"Titulo\">\r\n          Telas Bonanza\r\n        </div>\r\n        <div className=\"DMenu\">\r\n          <ButtonDropdown isOpen={this.state.dropdownOpen} toggle={this.toggle}>\r\n            <DropdownToggle caret>\r\n              Button Dropdown\r\n            </DropdownToggle>\r\n              <DropdownMenu>\r\n                <DropdownItem header>Header</DropdownItem>\r\n                <DropdownItem disabled>Action</DropdownItem>\r\n                <DropdownItem>Another Action</DropdownItem>\r\n                <DropdownItem divider />\r\n                <DropdownItem>Another Action</DropdownItem>\r\n              </DropdownMenu>\r\n          </ButtonDropdown>\r\n        </div>\r\n      </div>\r\n        );\r\n    }\r\n}\r\nexport default DropdownMenuHandler;","import React, {Component} from 'react';\r\nimport  './Product.css';\r\nclass Product extends Component{\r\n    render() {\r\n        return (\r\n          <div className=\"Product\">\r\n          <img src={this.props.imagen} alt={this.props.tela}></img>\r\n            <div className=\"middle\">\r\n              <div className=\"text\">\r\n                {this.props.tela}-\r\n                {this.props.precio}\r\n              </div>\r\n            </div>            \r\n          </div>\r\n        );\r\n      }\r\n    }\r\n    \r\nexport default Product;\r\n    ","import React, { Component } from 'react';\nimport DropdownMenuHandler from './Dropdownmenu'\nimport Sticky from 'react-sticky-el';\nimport Product from './Product'\n\nimport axios from 'axios'\nimport './App.css';\nimport Image from'./4k.jpg'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data : []\n      }\n    }\n  \n\n  componentWillMount(){\n    axios.get('https://swapi.co/api/people/1').then(\n     response => {\n      this.setState = {\n        data : response\n      }\n      console.log(this.state.data)\n    }\n    )\n  }\n    \n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"Sticker\">\n          <Sticky>\n            <DropdownMenuHandler/>\n          </Sticky>\n      </div>\n        <div className=\"data-container\">\n          {this.state.data ? this.state.data.map(function(title, price, image){\n                return (<Product title = {title} price = {price} image = {image}/>)\n                }\n              ) : null \n          }      \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}