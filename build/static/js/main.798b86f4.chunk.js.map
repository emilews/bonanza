{"version":3,"sources":["Product.js","Dropdownmenu.js","StickyHeader.js","App.js","serviceWorker.js","index.js"],"names":["Product","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","category","react_default","a","createElement","className","src","image","alt","title","price","Component","DropdownMenuHandler","toggle","bind","assertThisInitialized","dropdownOpen","setState","forceUpdate","console","log","data","StickyHeader","src_Dropdownmenu","App","loaded","_this2","fetch","then","json","result","_this3","_this4","_this5","src_StickyHeader_0","onClick","todo","cat","cat2","map","prod","index","src_Product_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.798b86f4.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport  './Product.css';\r\n\r\nclass Product extends Component{\r\n  constructor(props){\r\n    super(props)\r\n\r\n    this.state = {\r\n      category : props.category\r\n    }\r\n  }\r\n    render() {\r\n        return (\r\n          <div className=\"inliner\">\r\n          <div className=\"Product\">\r\n            <img src={this.props.image} alt={this.props.title}></img>\r\n              <div className=\"middle\">\r\n                <div className=\"text\">\r\n                  {this.props.title}<br></br>\r\n                  ${this.props.price}\r\n                </div>\r\n              </div>            \r\n          </div>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n    \r\nexport default Product;\r\n    ","import React, {Component} from 'react'\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\nimport './Dropdownmenu.css'\r\n\r\nclass DropdownMenuHandler extends Component{\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.toggle = this.toggle.bind(this);\r\n    this.state = {\r\n      dropdownOpen: false\r\n    };\r\n  }\r\n\r\n  toggle() {\r\n    this.setState({\r\n      dropdownOpen: !this.state.dropdownOpen\r\n    });\r\n  }\r\n  Force(){\r\n    this.forceUpdate();\r\n    console.log(this.state.data)\r\n  }\r\n  render(){\r\n    return(\r\n      <div className=\"Sticker\">\r\n        <div className=\"Titulo\">\r\n          Telas Bonanza\r\n        </div>\r\n        <div className=\"DMenu\">\r\n        \r\n        </div>\r\n      </div>\r\n        );\r\n    }\r\n}\r\nexport default DropdownMenuHandler;","import React, {Component} from 'react'\r\nimport Sticky from 'react-sticky-el';\r\nimport DropdownMenuHandler from './Dropdownmenu'\r\n\r\nimport './StickyHeader.css'\r\nclass StickyHeader extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"Topping\">\r\n                    <DropdownMenuHandler/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default StickyHeader;","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nimport Product from './Product'\r\nimport StickyHeader from './StickyHeader'\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      data : [],\r\n      loaded: false\r\n      }\r\n\r\n      \r\n    }\r\n  \r\n\r\n  componentDidMount(){\r\n    fetch('http://127.0.0.1:8000/api/v1/post/').then(\r\n     data => data.json()\r\n     \r\n    ).then((result) =>{\r\n      this.setState({\r\n        data : result,\r\n        loaded : true\r\n      })\r\n      console.log(this.state.data)\r\n    }\r\n    )\r\n  }\r\n\r\n  cat(){\r\n    fetch('http://127.0.0.1:8000/api/v1/category/LIC').then(\r\n      data => data.json()\r\n     ).then((result) =>{\r\n       this.setState({\r\n         data : result,\r\n         loaded : true\r\n       })\r\n       this.forceUpdate();\r\n     }\r\n     )\r\n   }\r\n   cat2(){\r\n    fetch('http://127.0.0.1:8000/api/v1/category/CAM').then(\r\n      data => data.json()\r\n     ).then((result) =>{\r\n       this.setState({\r\n         data : result,\r\n         loaded : true\r\n       })\r\n       this.forceUpdate();\r\n     }\r\n     )\r\n   }\r\n   todo(){\r\n    fetch('http://127.0.0.1:8000/api/v1/post/').then(\r\n      data => data.json()\r\n     ).then((result) =>{\r\n       this.setState({\r\n         data : result,\r\n         loaded : true\r\n       })\r\n       this.forceUpdate();\r\n     }\r\n     )\r\n   }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"Sticker\">\r\n          <StickyHeader/>\r\n        </header>\r\n        <div className=\"cat-container\">\r\n          <button onClick={this.todo.bind(this)}>Todo</button>\r\n          <button onClick={this.cat.bind(this)}>Licra</button>\r\n          <button onClick={this.cat2.bind(this)}>Camiseta</button>\r\n          \r\n        </div>\r\n        <div className=\"data-container\">\r\n          {this.state.data.map(function(prod, index){\r\n                return (<Product title = {prod.title} price = {prod.price} image = {prod.image}/>)\r\n                }\r\n              )\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}